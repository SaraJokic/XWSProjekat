syntax = "proto3";

option go_package="proto/accommodation_service";

import "google/api/annotations.proto";



service AccommodationService{
  rpc Get(AccGetRequest) returns(AccGetResponse) {
    option (google.api.http) = {
      get: "/accommodations/get/{id}"
    };
  }
  rpc GetByUserId(AccGetByUserIdRequest) returns(AccGetByUserIdResponse) {
    option (google.api.http) = {
      get: "/accommodations/getbyhostid/{id}"
    };
  }

  rpc GetAll(AccGetAllRequest) returns(AccGetAllResponse) {
    option (google.api.http) = {
      get: "/accommodations"
    };
  }

  rpc GetAllProminentAccommodation(AccGetAllRequest) returns(AccGetAllResponse) {
    option (google.api.http) = {
      get: "/GetAllProminentAccommodation"
    };
  }
  rpc CreateNewAccommodation(AccCreateRequest) returns(AccCreateResponse) {
    option (google.api.http) = {
      post: "/accommodations/create"
      body: "*"
    };
  }
  rpc UpdateAccommodation(UpdateAccommodationRequest) returns (UpdateAccommodationResponse) {
    option (google.api.http) = {
      put: "/accommodations/update"
      body: "*"
    };
  }
  rpc Search(SearchRequest) returns (AccGetAllResponse) {
    option (google.api.http) = {
      post: "/accommodations/search"
      body: "*"
    };
  }
}

message SearchRequest {
  string location = 1;
  int32 guests = 2;
  string start_date = 3;
  string end_date = 4;
}


message UpdateAccommodationRequest{
  string id = 1;
  Accommodation accommodation = 2;
}
message UpdateAccommodationResponse{
  Accommodation accommodation = 2;
}
message AccGetByUserIdRequest{
  string id = 1;
}
message AccGetByUserIdResponse{
  repeated Accommodation acc = 1;
}
message AccGetRequest {
  string id = 1;
}

message AccGetResponse {
  Accommodation acc = 1;
}
message AccGetAllRequest {
}

message AccGetAllResponse {
  repeated Accommodation acc = 1;

}
message AccCreateRequest {
  NewAccommodation acc = 1;
}

message AccCreateResponse {
  string id = 1;
}

message Accommodation {
  string id = 1;
  string name = 2;
  string location = 3;
  Benefits benefits = 4;
  int32 minGuests= 5;
  int32 maxGuests =6;
  repeated string pictures = 7;
  string description = 8;
  string hostId = 9;
  bool automaticApprove = 10;
}

message Benefits{
  bool wifi = 1;
  bool freeParking =2;
  bool kitchen = 3;
}
message NewAccommodation{
  string name = 2;
  string location = 3;
  Benefits benefits = 4;
  int32 minGuests= 5;
  int32 maxGuests =6;
  repeated string pictures = 7;
  string description = 8;
  string hostId = 9;
  bool automaticApprove = 10;
}


