version: "3.8"

services:
  user_service:
    image: user-service
    container_name: user-service
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    restart: on-failure
    environment:
      USER_DB_HOST: ${USER_DB_HOST}
      USER_DB_PORT: ${USER_DB_PORT}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      CANCEL_RESERVATION_COMMAND_SUBJECT: ${CANCEL_RESERVATION_COMMAND_SUBJECT}
      CANCEL_RESERVATION_REPLY_SUBJECT: ${CANCEL_RESERVATION_REPLY_SUBJECT}
    depends_on:
      - user_db
    networks:
      - network

  accommodation_service:
    image:  accommodation-service
    container_name:  accommodation-service
    build:
      context: .
      dockerfile: ./accommodation-service/Dockerfile
    restart: on-failure
    environment:
      ACCOMMODATION_DB_HOST: ${ACCOMMODATION_DB_HOST}
      ACCOMMODATION_DB_PORT: ${ACCOMMODATION_DB_PORT}
      ACCOMMODATION_SERVICE_PORT: ${ACCOMMODATION_SERVICE_PORT}
    depends_on:
      - accommodation_db
    networks:
      - network

  availability_service:
    image: availability-service
    container_name: availability-service
    build:
      context: .
      dockerfile: ./availability-service/Dockerfile
    restart: on-failure
    environment:
      AVAILABILITY_DB_HOST: ${AVAILABILITY_DB_HOST}
      AVAILABILITY_DB_PORT: ${AVAILABILITY_DB_PORT}
      AVAILABILITY_SERVICE_PORT: ${AVAILABILITY_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      CANCEL_RESERVATION_COMMAND_SUBJECT: ${CANCEL_RESERVATION_COMMAND_SUBJECT}
      CANCEL_RESERVATION_REPLY_SUBJECT: ${CANCEL_RESERVATION_REPLY_SUBJECT}
    depends_on:
      - availability_db
    networks:
      - network

  reservation_service:
    image: reservation-service
    container_name: reservation-service
    build:
      context: .
      dockerfile: ./reservation-service/Dockerfile
    restart: on-failure
    environment:
      RESERVATION_DB_HOST: ${RESERVATION_DB_HOST}
      RESERVATION_DB_PORT: ${RESERVATION_DB_PORT}
      RESERVATION_SERVICE_PORT: ${RESERVATION_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      CANCEL_RESERVATION_COMMAND_SUBJECT: ${CANCEL_RESERVATION_COMMAND_SUBJECT}
      CANCEL_RESERVATION_REPLY_SUBJECT: ${CANCEL_RESERVATION_REPLY_SUBJECT}
    depends_on:
      - reservation_db
    networks:
      - network

  auth_service:
    image:  auth-service
    container_name:  auth-service
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
    restart: on-failure
    environment:
      AUTH_DB_HOST: ${AUTH_DB_HOST}
      AUTH_DB_PORT: ${AUTH_DB_PORT}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
    depends_on:
      - auth_db
    networks:
      - network

  rating_service:
    image: rating-service
    container_name: rating-service
    build:
      context: .
      dockerfile: ./rating-service/Dockerfile
    restart: on-failure
    environment:
      RATING_DB_HOST: ${RATING_DB_HOST}
      RATING_DB_PORT: ${RATING_DB_PORT}
      RATING_SERVICE_PORT: ${RATING_SERVICE_PORT}
    depends_on:
      - rating_db
    networks:
      - network


  api_gateway:
    image: api_gateway
    container_name: api_gateway
    build:
      context: .
      dockerfile: ./api_gateway/Dockerfile
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT}
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}

      ACCOMMODATION_SERVICE_HOST: ${ACCOMMODATION_SERVICE_HOST}
      ACCOMMODATION_SERVICE_PORT: ${ACCOMMODATION_SERVICE_PORT}

      AVAILABILITY_SERVICE_HOST: ${AVAILABILITY_SERVICE_HOST}
      AVAILABILITY_SERVICE_PORT: ${AVAILABILITY_SERVICE_PORT}

      AUTH_SERVICE_HOST: ${AUTH_SERVICE_HOST}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}

      RESERVATION_SERVICE_HOST: ${RESERVATION_SERVICE_HOST}
      RESERVATION_SERVICE_PORT: ${RESERVATION_SERVICE_PORT}

      RATING_SERVICE_HOST: ${RATING_SERVICE_HOST}
      RATING_SERVICE_PORT: ${RATING_SERVICE_PORT}
    networks:
      - network




  user_db:
    image: mongo
    container_name: user_db
    restart: on-failure
    networks:
      - network

  accommodation_db:
    image: mongo
    container_name: accommodation_db
    restart: on-failure
    networks:
      - network

  availability_db:
    image: mongo
    container_name: availability_db
    restart: on-failure
    networks:
      - network

  auth_db:
    image: mongo
    container_name: auth_db
    restart: on-failure
    networks:
      - network

  reservation_db:
    image: mongo
    container_name: reservation_db
    restart: on-failure
    networks:
      - network

  rating_db:
    image: mongo
    container_name: rating_db
    restart: on-failure
    networks:
      - network

  nats:
    image: nats
    container_name: nats
    restart: on-failure
    networks:
      - network

networks:
  network:
    driver: bridge