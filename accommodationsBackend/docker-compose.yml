version: "3.8"

services:
  user_service:
    image: user-service
    container_name: user-service
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    restart: on-failure
    environment:
      USER_DB_HOST: ${USER_DB_HOST}
      USER_DB_PORT: ${USER_DB_PORT}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
    depends_on:
      - user_db
    networks:
      - network
      - 
  accommodation_service:
    image:  accommodation_service
    container_name:  accommodation_service
    build:
      context: .
      dockerfile: ./accommodation_service/Dockerfile
    restart: on-failure
    environment:
      USER_DB_HOST: ${ACCOMMODATION_DB_HOST}
      USER_DB_PORT: ${ACCOMMODATION_DB_PORT}
      USER_SERVICE_PORT: ${ACCOMMODATION_SERVICE_PORT}
    depends_on:
      - accommodation_db
    networks:
      - network


  api_gateway:
    image: api_gateway
    container_name: api_gateway
    build:
      context: .
      dockerfile: ./api_gateway/Dockerfile
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT}
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}

      ACCOMMODATION_SERVICE_HOST: ${ACCOMMODATION_SERVICE_HOST}
      ACCOMMODATION_SERVICE_PORT: ${ACCOMMODATION_SERVICE_PORT}
    networks:
      - network

  user_db:
    image: mongo
    container_name: user_db
    restart: on-failure
    networks:
      - network

  accommodation_db:
    image: mongo
    container_name: accommodation_db
    restart: on-failure
    networks:
      - network
  mongo_express:
    image: mongo-express
    container_name: mongo_express
    ports:
      - ${MONGO_EXPRESS_PORT}:${MONGO_EXPRESS_PORT}
    environment:
      ME_CONFIG_MONGODB_SERVER: user_db
    networks:
      - network

  nats:
    image: nats
    container_name: nats
    restart: on-failure
    networks:
      - network
networks:
  network:
    driver: bridge